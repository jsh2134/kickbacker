[program:kickbacker]
command=python handler.py
environment=PYTHONPATH=/home/kickbacker/kb
directory=/home/kickbacker/kb/
user=kickbacker
numprocs=1
stdout_logfile=/var/log/kickbacker.log
stderr_logfile=/var/log/kickbacker_error.log
autostart=true
autorestart=true
startsecs=10


[program:redis]
command=/usr/local/bin/redis-server
autorestart=true
stdout_logfile=/var/log/redis.log


[program:celery]
command=celeryd --app=kickbacker.celery_queue.celery_queue.celery_server --loglevel=INFO
stdout_logfile=/var/log/celeryd.log
stderr_logfile=/var/log/celeryd.log
autostart=true
autorestart=true
startsecs=10

; Need to wait for currently executing tasks to finish at shutdown.
; Increase this if you have very long running tasks.
stopwaitsecs = 600



[unix_http_server]
file=/tmp/supervisor.sock   ; path to your socket file

[supervisord]
logfile=/var/log/supervisord.log ; supervisord log file
logfile_maxbytes=50MB       ; maximum size of logfile before rotation
logfile_backups=10          ; number of backed up logfiles
loglevel=info               ; info, debug, warn, trace
pidfile=/var/run/supervisord.pid ; pidfile location
nodaemon=false              ; run supervisord as a daemon
minfds=1024                 ; number of startup file descriptors
minprocs=200                ; number of process descriptors
user=root                   ; default user
childlogdir=/var/log/supervisord/            ; where child log files will live


[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock ; use unix:// schem for a unix sockets.



